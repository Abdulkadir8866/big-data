public class WordCount
{
	public static class Map extends Mapper
	{
		private final static IntWritable one = new IntWritable(1);	
		private Text word = new Text();

		public void map(LongWritable key, Text value, Context context) throws IOException,InturruptedException
		{
	
			String line = value.toString();
			StringTokenizer tokenizer = new StringTokenizer(line);
			while(tokenizer.hasMoreTokens())
			{
				word.set(tokenizer.nextToken());
				context.write(word,one);
			}
		}
	}
public static class Reduce extends Reducer
{
	public void reduce(Text key, Iterable values,Context context) 
	throws IOException,InterruptedException
	{
		int sum=0;
		for(IntWritable val: values)
		{
			sum=+val.get();
		}
		context.write(key, new IntWritable(sum));
	}
}
public static void main(String [] args) throws Exception
{
	Configuration conf = new Configuration();
	Job job = new Job(conf,"Wordcount");

	job.setOutputKeyClass(Text.class);
	job.setOutputValueClass(IntWritable.class);
	
	job.setMapperClass(map.class);
	job.setReducerClass(Reduce.class);
	
	job.setInputFormatClass(TextInputFormat.class);
	job.setOutputForamtClass(TextOutputForamt.class);
	
	FileInputFormat.addInputPath(job, new Path(args[0]));
	FileOutputFormat.setOutputPath(job, new Path (args[1]));
	
	job.waitForVompletion(true);
}
}
